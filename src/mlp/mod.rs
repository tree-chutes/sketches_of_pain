// Copyright (c) 2025, tree-chutes

pub mod activation_functions;
pub mod aggregator_functions;
mod conv2d;
mod cross_entropy;
mod identity;
pub mod layers;
mod linear_layer;
pub mod loss_functions;
mod mean_squares;
mod register;
mod relu;
mod sigmoid;
mod softmax;

#[cfg(test)]
mod tests {
    use super::{
        layers::{Layers, layer_factory},
        loss_functions::{LossFunctions, loss_function_factory},
    };

    #[test]
    fn test_17_x_17_f64() {
        let x0: Vec<f64> = vec![0.1, 0.2, 0.3];
        let x1: Vec<f64> = vec![0.4, 0.5, 0.6];
        let x2: Vec<f64> = vec![0.7, 0.8, 0.9];
        let x3: Vec<f64> = vec![1.0, 1.1, 1.2];
        let x4: Vec<f64> = vec![1.3, 1.4, 1.5];
        let x5: Vec<f64> = vec![1.6, 1.7, 1.8];
        let x6: Vec<f64> = vec![1.9, 2.0, 2.1];
        let x7: Vec<f64> = vec![2.2, 2.3, 2.4];
        let x8: Vec<f64> = vec![2.5, 2.6, 2.7];
        let x9: Vec<f64> = vec![2.8, 2.9, 3.0];
        let x10: Vec<f64> = vec![3.1, 3.2, 3.3];
        let x11: Vec<f64> = vec![3.4, 3.5, 3.6];
        let x12: Vec<f64> = vec![3.7, 3.8, 3.9];
        let x13: Vec<f64> = vec![4.0, 4.1, 4.2];
        let x14: Vec<f64> = vec![4.3, 4.4, 4.5];
        let x15: Vec<f64> = vec![4.6, 4.7, 4.8];
        let x16: Vec<f64> = vec![4.9, 5.0, 5.1];
        let X = vec![
            x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16,
        ];

        let w0: Vec<f64> = vec![
            0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3,
        ];
        let w1: Vec<f64> = vec![
            2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0,
        ];
        let w2: Vec<f64> = vec![
            4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7,
        ];
        let W = vec![w0, w1, w2];

        let b0: Vec<f64> = vec![0.0; 17];
        let b1: Vec<f64> = vec![0.0; 17];
        let b2: Vec<f64> = vec![0.0; 17];
        let b3: Vec<f64> = vec![0.0; 17];
        let b4: Vec<f64> = vec![0.0; 17];
        let b5: Vec<f64> = vec![0.0; 17];
        let b6: Vec<f64> = vec![0.0; 17];
        let b7: Vec<f64> = vec![0.0; 17];
        let b8: Vec<f64> = vec![0.0; 17];
        let b9: Vec<f64> = vec![0.0; 17];
        let b10: Vec<f64> = vec![0.0; 17];
        let b11: Vec<f64> = vec![0.0; 17];
        let b12: Vec<f64> = vec![0.0; 17];
        let b13: Vec<f64> = vec![0.0; 17];
        let b14: Vec<f64> = vec![0.0; 17];
        let b15: Vec<f64> = vec![0.0; 17];
        let b16: Vec<f64> = vec![0.0; 17];
        let B = vec![
            b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16,
        ];

        let y0: Vec<f64> = vec![1.0; 17];
        let y1: Vec<f64> = vec![1.0; 17];
        let y2: Vec<f64> = vec![1.0; 17];
        let y3: Vec<f64> = vec![1.0; 17];
        let y4: Vec<f64> = vec![1.0; 17];
        let y5: Vec<f64> = vec![1.0; 17];
        let y6: Vec<f64> = vec![1.0; 17];
        let y7: Vec<f64> = vec![1.0; 17];
        let y8: Vec<f64> = vec![1.0; 17];
        let y9: Vec<f64> = vec![1.0; 17];
        let y10: Vec<f64> = vec![1.0; 17];
        let y11: Vec<f64> = vec![1.0; 17];
        let y12: Vec<f64> = vec![1.0; 17];
        let y13: Vec<f64> = vec![1.0; 17];
        let y14: Vec<f64> = vec![1.0; 17];
        let y15: Vec<f64> = vec![1.0; 17];
        let y16: Vec<f64> = vec![1.0; 17];
        let Y = vec![
            y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16,
        ];

        let Z = [
            1.7799999999999998,
            1.84,
            1.9,
            1.9600000000000002,
            2.02,
            2.08,
            2.14,
            2.2,
            2.2600000000000002,
            2.3200000000000003,
            2.38,
            2.44,
            2.5,
            2.56,
            2.62,
            2.6799999999999997,
            2.74,
            3.9399999999999995,
            4.09,
            4.239999999999999,
            4.390000000000001,
            4.539999999999999,
            4.6899999999999995,
            4.84,
            4.99,
            5.140000000000001,
            5.29,
            5.4399999999999995,
            5.59,
            5.739999999999999,
            5.890000000000001,
            6.039999999999999,
            6.19,
            6.34,
            6.1,
            6.34,
            6.58,
            6.82,
            7.0600000000000005,
            7.299999999999999,
            7.540000000000001,
            7.78,
            8.02,
            8.26,
            8.5,
            8.74,
            8.98,
            9.22,
            9.46,
            9.7,
            9.940000000000001,
            8.26,
            8.59,
            8.92,
            9.25,
            9.58,
            9.91,
            10.24,
            10.57,
            10.9,
            11.23,
            11.559999999999999,
            11.89,
            12.22,
            12.55,
            12.879999999999999,
            13.21,
            13.540000000000001,
            10.42,
            10.84,
            11.259999999999998,
            11.68,
            12.1,
            12.52,
            12.94,
            13.36,
            13.780000000000001,
            14.2,
            14.62,
            15.04,
            15.459999999999997,
            15.88,
            16.3,
            16.72,
            17.14,
            12.58,
            13.09,
            13.6,
            14.110000000000001,
            14.62,
            15.129999999999999,
            15.64,
            16.15,
            16.66,
            17.17,
            17.68,
            18.19,
            18.7,
            19.21,
            19.720000000000002,
            20.23,
            20.74,
            14.739999999999998,
            15.34,
            15.939999999999998,
            16.540000000000003,
            17.14,
            17.74,
            18.34,
            18.94,
            19.54,
            20.14,
            20.74,
            21.340000000000003,
            21.94,
            22.54,
            23.14,
            23.74,
            24.34,
            16.9,
            17.59,
            18.279999999999998,
            18.970000000000002,
            19.659999999999997,
            20.349999999999998,
            21.04,
            21.73,
            22.42,
            23.11,
            23.799999999999997,
            24.490000000000002,
            25.18,
            25.869999999999997,
            26.56,
            27.25,
            27.939999999999998,
            19.060000000000002,
            19.840000000000003,
            20.62,
            21.400000000000002,
            22.18,
            22.96,
            23.740000000000002,
            24.520000000000003,
            25.300000000000004,
            26.08,
            26.86,
            27.64,
            28.42,
            29.200000000000003,
            29.98,
            30.759999999999998,
            31.54,
            21.22,
            22.090000000000003,
            22.959999999999997,
            23.83,
            24.699999999999996,
            25.57,
            26.44,
            27.309999999999995,
            28.18,
            29.049999999999997,
            29.919999999999998,
            30.79,
            31.659999999999997,
            32.53,
            33.4,
            34.269999999999996,
            35.14,
            23.379999999999995,
            24.34,
            25.3,
            26.26,
            27.22,
            28.18,
            29.14,
            30.1,
            31.060000000000002,
            32.02,
            32.98,
            33.940000000000005,
            34.9,
            35.86,
            36.82,
            37.78,
            38.739999999999995,
            25.54,
            26.59,
            27.64,
            28.690000000000005,
            29.739999999999995,
            30.79,
            31.840000000000003,
            32.89,
            33.940000000000005,
            34.99,
            36.04,
            37.09,
            38.14,
            39.190000000000005,
            40.24,
            41.29,
            42.34,
            27.699999999999996,
            28.84,
            29.98,
            31.119999999999997,
            32.26,
            33.4,
            34.54,
            35.68,
            36.82,
            37.96,
            39.099999999999994,
            40.24,
            41.379999999999995,
            42.52,
            43.66,
            44.8,
            45.94,
            29.86,
            31.09,
            32.32,
            33.550000000000004,
            34.78,
            36.01,
            37.24,
            38.47,
            39.7,
            40.92999999999999,
            42.16,
            43.39,
            44.62,
            45.85,
            47.08,
            48.31,
            49.54,
            32.02,
            33.34,
            34.66,
            35.980000000000004,
            37.3,
            38.62,
            39.940000000000005,
            41.26,
            42.58,
            43.9,
            45.22,
            46.540000000000006,
            47.86,
            49.18,
            50.5,
            51.81999999999999,
            53.14,
            34.17999999999999,
            35.59,
            37.0,
            38.41,
            39.81999999999999,
            41.23,
            42.64,
            44.05,
            45.46,
            46.87,
            48.28,
            49.69,
            51.099999999999994,
            52.510000000000005,
            53.92,
            55.33,
            56.739999999999995,
            36.339999999999996,
            37.84,
            39.339999999999996,
            40.84,
            42.34,
            43.839999999999996,
            45.34,
            46.839999999999996,
            48.339999999999996,
            49.84,
            51.339999999999996,
            52.84,
            54.339999999999996,
            55.84,
            57.339999999999996,
            58.839999999999996,
            60.34,
        ];

        let D_Z = [
            0.005397923875432525,
            0.005813148788927336,
            0.0062283737024221445,
            0.006643598615916957,
            0.007058823529411765,
            0.007474048442906575,
            0.007889273356401385,
            0.008304498269896196,
            0.008719723183391006,
            0.009134948096885816,
            0.009550173010380622,
            0.009965397923875432,
            0.010380622837370242,
            0.010795847750865053,
            0.011211072664359863,
            0.01162629757785467,
            0.012041522491349483,
            0.020346020761245674,
            0.0213840830449827,
            0.02242214532871972,
            0.023460207612456752,
            0.024498269896193768,
            0.025536332179930794,
            0.02657439446366782,
            0.027612456747404847,
            0.028650519031141873,
            0.029688581314878892,
            0.030726643598615915,
            0.03176470588235294,
            0.032802768166089964,
            0.033840830449827,
            0.03487889273356401,
            0.03591695501730104,
            0.03695501730103806,
            0.03529411764705882,
            0.03695501730103806,
            0.0386159169550173,
            0.04027681660899654,
            0.04193771626297578,
            0.04359861591695501,
            0.045259515570934265,
            0.0469204152249135,
            0.04858131487889273,
            0.05024221453287197,
            0.051903114186851215,
            0.053564013840830454,
            0.055224913494809694,
            0.05688581314878893,
            0.05854671280276817,
            0.060207612456747404,
            0.06186851211072666,
            0.05024221453287197,
            0.05252595155709343,
            0.05480968858131488,
            0.05709342560553633,
            0.059377162629757785,
            0.061660899653979244,
            0.06394463667820069,
            0.06622837370242216,
            0.06851211072664361,
            0.07079584775086506,
            0.0730795847750865,
            0.07536332179930796,
            0.07764705882352942,
            0.07993079584775087,
            0.08221453287197232,
            0.08449826989619379,
            0.08678200692041524,
            0.06519031141868513,
            0.0680968858131488,
            0.07100346020761245,
            0.07391003460207612,
            0.07681660899653979,
            0.07972318339100345,
            0.08262975778546713,
            0.0855363321799308,
            0.08844290657439448,
            0.09134948096885813,
            0.0942560553633218,
            0.09716262975778546,
            0.10006920415224912,
            0.10297577854671282,
            0.10588235294117648,
            0.10878892733564013,
            0.11169550173010381,
            0.08013840830449827,
            0.08366782006920416,
            0.08719723183391004,
            0.09072664359861593,
            0.0942560553633218,
            0.09778546712802767,
            0.10131487889273356,
            0.10484429065743944,
            0.10837370242214533,
            0.11190311418685123,
            0.11543252595155709,
            0.11896193771626298,
            0.12249134948096886,
            0.12602076124567474,
            0.12955017301038063,
            0.13307958477508652,
            0.1366089965397924,
            0.09508650519031141,
            0.09923875432525951,
            0.1033910034602076,
            0.10754325259515574,
            0.11169550173010381,
            0.11584775086505189,
            0.12000000000000001,
            0.12415224913494811,
            0.1283044982698962,
            0.1324567474048443,
            0.1366089965397924,
            0.14076124567474052,
            0.1449134948096886,
            0.14906574394463667,
            0.15321799307958478,
            0.15737024221453286,
            0.16152249134948096,
            0.11003460207612456,
            0.11480968858131488,
            0.11958477508650518,
            0.12435986159169553,
            0.1291349480968858,
            0.13391003460207612,
            0.13868512110726644,
            0.14346020761245676,
            0.14823529411764708,
            0.15301038062283737,
            0.15778546712802766,
            0.162560553633218,
            0.16733564013840832,
            0.1721107266435986,
            0.17688581314878893,
            0.18166089965397925,
            0.18643598615916954,
            0.12498269896193774,
            0.13038062283737026,
            0.1357785467128028,
            0.14117647058823532,
            0.14657439446366782,
            0.15197231833910035,
            0.15737024221453288,
            0.16276816608996542,
            0.16816608996539795,
            0.17356401384083045,
            0.17896193771626298,
            0.1843598615916955,
            0.18975778546712804,
            0.19515570934256057,
            0.20055363321799308,
            0.2059515570934256,
            0.21134948096885814,
            0.13993079584775087,
            0.14595155709342564,
            0.15197231833910033,
            0.15799307958477507,
            0.16401384083044981,
            0.17003460207612459,
            0.17605536332179933,
            0.18207612456747402,
            0.1880968858131488,
            0.1941176470588235,
            0.20013840830449825,
            0.20615916955017302,
            0.21217993079584774,
            0.2182006920415225,
            0.22422145328719723,
            0.23024221453287194,
            0.2362629757785467,
            0.15487889273356398,
            0.16152249134948096,
            0.16816608996539795,
            0.1748096885813149,
            0.18145328719723183,
            0.1880968858131488,
            0.19474048442906575,
            0.2013840830449827,
            0.2080276816608997,
            0.21467128027681665,
            0.22131487889273355,
            0.22795847750865056,
            0.23460207612456746,
            0.24124567474048444,
            0.2478892733564014,
            0.25453287197231833,
            0.2611764705882353,
            0.16982698961937717,
            0.17709342560553634,
            0.1843598615916955,
            0.1916262975778547,
            0.19889273356401382,
            0.20615916955017302,
            0.21342560553633222,
            0.22069204152249136,
            0.22795847750865056,
            0.2352249134948097,
            0.24249134948096887,
            0.24975778546712807,
            0.2570242214532872,
            0.2642906574394464,
            0.2715570934256056,
            0.2788235294117647,
            0.2860899653979239,
            0.18477508650519028,
            0.1926643598615917,
            0.20055363321799308,
            0.20844290657439446,
            0.21633217993079584,
            0.22422145328719723,
            0.2321107266435986,
            0.24000000000000002,
            0.2478892733564014,
            0.25577854671280276,
            0.26366782006920414,
            0.2715570934256056,
            0.2794463667820069,
            0.28733564013840834,
            0.29522491349480967,
            0.30311418685121105,
            0.31100346020761244,
            0.19972318339100345,
            0.20823529411764707,
            0.21674740484429067,
            0.2252595155709343,
            0.23377162629757786,
            0.24228373702422146,
            0.25079584775086505,
            0.25930795847750865,
            0.2678200692041523,
            0.2763321799307958,
            0.28484429065743944,
            0.29335640138408303,
            0.30186851211072663,
            0.3103806228373703,
            0.3188927335640138,
            0.32740484429065747,
            0.33591695501730107,
            0.21467128027681665,
            0.22380622837370245,
            0.2329411764705882,
            0.24207612456747407,
            0.2512110726643598,
            0.2603460207612457,
            0.26948096885813155,
            0.2786159169550173,
            0.2877508650519031,
            0.2968858131487889,
            0.30602076124567473,
            0.3151557093425606,
            0.32429065743944635,
            0.3334256055363322,
            0.342560553633218,
            0.3516955017301038,
            0.36083044982698964,
            0.2296193771626297,
            0.2393771626297578,
            0.24913494809688583,
            0.2588927335640138,
            0.26865051903114184,
            0.27840830449826987,
            0.28816608996539794,
            0.29792387543252596,
            0.307681660899654,
            0.317439446366782,
            0.32719723183391003,
            0.33695501730103805,
            0.3467128027681661,
            0.35647058823529415,
            0.36622837370242217,
            0.3759861591695502,
            0.38574394463667816,
            0.2445674740484429,
            0.25494809688581316,
            0.2653287197231834,
            0.2757093425605537,
            0.2860899653979239,
            0.2964705882352941,
            0.3068512110726644,
            0.31723183391003457,
            0.3276124567474048,
            0.33799307958477515,
            0.3483737024221453,
            0.3587543252595156,
            0.3691349480968858,
            0.3795155709342561,
            0.38989619377162626,
            0.4002768166089965,
            0.41065743944636685,
        ];

        let U_W = [
            -0.014141176470588318,
            0.055294117647058806,
            0.12472941176470582,
            0.19416470588235285,
            0.26359999999999995,
            0.33303529411764704,
            0.40247058823529402,
            0.47190588235294106,
            0.54134117647058821,
            0.61077647058823537,
            0.6802117647058824,
            0.74964705882352922,
            0.81908235294117648,
            0.88851764705882352,
            0.95795294117647056,
            1.0273882352941177,
            1.0968235294117643,
            1.6646117647058822,
            1.7331294117647058,
            1.8016470588235294,
            1.870164705882353,
            1.9386823529411761,
            2.0072000000000001,
            2.0757176470588234,
            2.1442352941176468,
            2.2127529411764706,
            2.2812705882352939,
            2.3497882352941173,
            2.4183058823529406,
            2.4868235294117649,
            2.5553411764705882,
            2.6238588235294116,
            2.6923764705882354,
            2.7608941176470587,
            3.3433647058823528,
            3.4109647058823533,
            3.4785647058823526,
            3.5461647058823531,
            3.6137647058823528,
            3.6813647058823524,
            3.748964705882353,
            3.8165647058823526,
            3.8841647058823532,
            3.9517647058823528,
            4.019364705882353,
            4.0869647058823526,
            4.1545647058823532,
            4.2221647058823528,
            4.2897647058823534,
            4.357364705882353,
            4.4249647058823527,
        ];
        let (mut data, l) = layer_factory::<f64>(Layers::Linear, X, W, B, None, 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let mut z = l.forward(data1, None);
        for i in 0..Z.len() {
            assert!((Z[i] - z[i]).abs() < f64::EPSILON);
        }
        let (flattened, squared) = loss_function_factory(LossFunctions::MeanSquares, Y, 1.0);
        let loss = squared.forward(&flattened, &z);
        assert!(loss[0] == 808.82279999999992);
        squared.backward(&z);
        for i in 0..D_Z.len() {
            assert!((D_Z[i] - z[i]).abs() < f64::EPSILON);
        }
        let data2 = (
            data.0.as_mut_slice(),
            data.1.as_mut_slice(),
            data.2.as_slice(),
        );
        let updated = l.backward(data2, &mut z, 0.1);
        for i in 0..U_W.len() {
            assert!((U_W[i] - updated.1[i]).abs() < f64::EPSILON);
        }
        println!("{:?}", updated.0);
    }

    #[test]
    fn test_17_x_17_f32() {
        let x0: Vec<f32> = vec![0.1, 0.2, 0.3];
        let x1: Vec<f32> = vec![0.4, 0.5, 0.6];
        let x2: Vec<f32> = vec![0.7, 0.8, 0.9];
        let x3: Vec<f32> = vec![1.0, 1.1, 1.2];
        let x4: Vec<f32> = vec![1.3, 1.4, 1.5];
        let x5: Vec<f32> = vec![1.6, 1.7, 1.8];
        let x6: Vec<f32> = vec![1.9, 2.0, 2.1];
        let x7: Vec<f32> = vec![2.2, 2.3, 2.4];
        let x8: Vec<f32> = vec![2.5, 2.6, 2.7];
        let x9: Vec<f32> = vec![2.8, 2.9, 3.0];
        let x10: Vec<f32> = vec![3.1, 3.2, 3.3];
        let x11: Vec<f32> = vec![3.4, 3.5, 3.6];
        let x12: Vec<f32> = vec![3.7, 3.8, 3.9];
        let x13: Vec<f32> = vec![4.0, 4.1, 4.2];
        let x14: Vec<f32> = vec![4.3, 4.4, 4.5];
        let x15: Vec<f32> = vec![4.6, 4.7, 4.8];
        let x16: Vec<f32> = vec![4.9, 5.0, 5.1];
        let X = vec![
            x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16,
        ];

        let w0: Vec<f32> = vec![
            0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3,
        ];
        let w1: Vec<f32> = vec![
            2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0,
        ];
        let w2: Vec<f32> = vec![
            4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7,
        ];
        let W = vec![w0, w1, w2];

        let b0: Vec<f32> = vec![0.0; 17];
        let b1: Vec<f32> = vec![0.0; 17];
        let b2: Vec<f32> = vec![0.0; 17];
        let b3: Vec<f32> = vec![0.0; 17];
        let b4: Vec<f32> = vec![0.0; 17];
        let b5: Vec<f32> = vec![0.0; 17];
        let b6: Vec<f32> = vec![0.0; 17];
        let b7: Vec<f32> = vec![0.0; 17];
        let b8: Vec<f32> = vec![0.0; 17];
        let b9: Vec<f32> = vec![0.0; 17];
        let b10: Vec<f32> = vec![0.0; 17];
        let b11: Vec<f32> = vec![0.0; 17];
        let b12: Vec<f32> = vec![0.0; 17];
        let b13: Vec<f32> = vec![0.0; 17];
        let b14: Vec<f32> = vec![0.0; 17];
        let b15: Vec<f32> = vec![0.0; 17];
        let b16: Vec<f32> = vec![0.0; 17];
        let B = vec![
            b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16,
        ];

        let y0: Vec<f32> = vec![1.0; 17];
        let y1: Vec<f32> = vec![1.0; 17];
        let y2: Vec<f32> = vec![1.0; 17];
        let y3: Vec<f32> = vec![1.0; 17];
        let y4: Vec<f32> = vec![1.0; 17];
        let y5: Vec<f32> = vec![1.0; 17];
        let y6: Vec<f32> = vec![1.0; 17];
        let y7: Vec<f32> = vec![1.0; 17];
        let y8: Vec<f32> = vec![1.0; 17];
        let y9: Vec<f32> = vec![1.0; 17];
        let y10: Vec<f32> = vec![1.0; 17];
        let y11: Vec<f32> = vec![1.0; 17];
        let y12: Vec<f32> = vec![1.0; 17];
        let y13: Vec<f32> = vec![1.0; 17];
        let y14: Vec<f32> = vec![1.0; 17];
        let y15: Vec<f32> = vec![1.0; 17];
        let y16: Vec<f32> = vec![1.0; 17];
        let Y = vec![
            y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16,
        ];

        let Z: [f32; 289] = [
            1.7800001, 1.84, 1.9000001, 1.96, 2.02, 2.08, 2.1399999, 2.2, 2.26, 2.32, 2.38, 2.44,
            2.5000002, 2.5600002, 2.6200001, 2.68, 2.74, 3.94, 4.09, 4.24, 4.3900003, 4.54, 4.69,
            4.84, 4.99, 5.14, 5.29, 5.4400005, 5.59, 5.7400002, 5.8900003, 6.0400004, 6.1900005,
            6.34, 6.1, 6.3399997, 6.58, 6.8199997, 7.0599995, 7.3, 7.5399995, 7.78, 8.02, 8.26,
            8.5, 8.74, 8.98, 9.22, 9.459999, 9.7, 9.94, 8.26, 8.59, 8.92, 9.25, 9.58, 9.91, 10.24,
            10.570001, 10.900001, 11.23, 11.560001, 11.89, 12.22, 12.550001, 12.880001, 13.21,
            13.540001, 10.42, 10.84, 11.26, 11.68, 12.1, 12.52, 12.94, 13.360001, 13.780001, 14.2,
            14.62, 15.039999, 15.46, 15.880001, 16.3, 16.72, 17.14, 12.58, 13.089999, 13.6,
            14.110001, 14.62, 15.13, 15.639999, 16.15, 16.66, 17.17, 17.68, 18.19, 18.7, 19.210001,
            19.72, 20.23, 20.74, 14.74, 15.339998, 15.94, 16.539999, 17.14, 17.739998, 18.339998,
            18.939999, 19.539999, 20.14, 20.739998, 21.34, 21.939999, 22.54, 23.14, 23.739998,
            24.34, 16.9, 17.59, 18.28, 18.970001, 19.66, 20.35, 21.039999, 21.73, 22.42, 23.11,
            23.800001, 24.490002, 25.18, 25.87, 26.56, 27.25, 27.939999, 19.06, 19.84, 20.619999,
            21.4, 22.18, 22.96, 23.74, 24.52, 25.3, 26.08, 26.86, 27.64, 28.420002, 29.2, 29.98,
            30.759998, 31.539999, 21.22, 22.09, 22.96, 23.83, 24.7, 25.57, 26.44, 27.31, 28.180002,
            29.05, 29.92, 30.79, 31.660002, 32.530003, 33.4, 34.27, 35.14, 23.380001, 24.339998,
            25.3, 26.260002, 27.220001, 28.18, 29.14, 30.1, 31.060001, 32.02, 32.98, 33.94,
            34.899998, 35.86, 36.82, 37.78, 38.739998, 25.54, 26.589998, 27.64, 28.689999,
            29.739998, 30.79, 31.839998, 32.89, 33.94, 34.99, 36.04, 37.09, 38.14, 39.190002,
            40.239998, 41.29, 42.339996, 27.7, 28.84, 29.98, 31.12, 32.260002, 33.4, 34.54, 35.68,
            36.82, 37.96, 39.1, 40.24, 41.38, 42.52, 43.66, 44.8, 45.94, 29.859999, 31.089998,
            32.32, 33.55, 34.78, 36.01, 37.239998, 38.47, 39.7, 40.93, 42.159996, 43.389996, 44.62,
            45.85, 47.079998, 48.309998, 49.54, 32.02, 33.34, 34.66, 35.980003, 37.3, 38.62,
            39.940002, 41.260002, 42.58, 43.9, 45.22, 46.54, 47.86, 49.18, 50.5, 51.82, 53.14,
            34.18, 35.59, 37.0, 38.41, 39.82, 41.23, 42.64, 44.05, 45.46, 46.87, 48.280003,
            49.690002, 51.1, 52.510002, 53.92, 55.33, 56.74, 36.34, 37.839996, 39.34, 40.84, 42.34,
            43.84, 45.34, 46.840004, 48.34, 49.84, 51.339996, 52.839996, 54.34, 55.84, 57.34,
            58.84, 60.339996,
        ];

        let D_Z: [f32; 289] = [
            0.0053979247,
            0.0058131493,
            0.006228375,
            0.006643599,
            0.0070588235,
            0.007474048,
            0.007889273,
            0.008304499,
            0.008719724,
            0.009134948,
            0.009550174,
            0.009965398,
            0.010380625,
            0.010795849,
            0.011211074,
            0.011626299,
            0.012041523,
            0.020346021,
            0.021384085,
            0.022422144,
            0.023460211,
            0.02449827,
            0.025536334,
            0.026574396,
            0.027612455,
            0.028650519,
            0.029688582,
            0.030726649,
            0.03176471,
            0.03280277,
            0.033840835,
            0.0348789,
            0.035916958,
            0.03695502,
            0.03529412,
            0.036955018,
            0.038615916,
            0.040276814,
            0.041937713,
            0.04359862,
            0.045259513,
            0.04692042,
            0.04858132,
            0.05024222,
            0.051903117,
            0.053564016,
            0.05522491,
            0.056885816,
            0.058546707,
            0.060207613,
            0.06186851,
            0.05024222,
            0.052525952,
            0.05480969,
            0.057093427,
            0.059377164,
            0.0616609,
            0.06394464,
            0.06622838,
            0.06851212,
            0.07079585,
            0.07307959,
            0.07536332,
            0.07764706,
            0.079930805,
            0.08221454,
            0.08449827,
            0.086782016,
            0.065190315,
            0.06809689,
            0.07100347,
            0.07391004,
            0.07681661,
            0.07972319,
            0.082629755,
            0.08553634,
            0.088442914,
            0.09134948,
            0.09425606,
            0.09716263,
            0.10006921,
            0.102975786,
            0.105882354,
            0.10878892,
            0.1116955,
            0.08013841,
            0.083667815,
            0.08719724,
            0.09072665,
            0.09425606,
            0.09778547,
            0.10131488,
            0.104844294,
            0.1083737,
            0.111903116,
            0.11543253,
            0.118961945,
            0.12249136,
            0.12602077,
            0.12955017,
            0.13307959,
            0.136609,
            0.09508651,
            0.099238746,
            0.10339101,
            0.10754325,
            0.1116955,
            0.11584774,
            0.11999999,
            0.12415224,
            0.1283045,
            0.13245675,
            0.13660899,
            0.14076126,
            0.1449135,
            0.14906575,
            0.15321799,
            0.15737024,
            0.1615225,
            0.1100346,
            0.11480969,
            0.119584784,
            0.124359876,
            0.12913495,
            0.13391005,
            0.13868512,
            0.14346021,
            0.1482353,
            0.15301038,
            0.15778548,
            0.16256057,
            0.16733564,
            0.17211074,
            0.17688581,
            0.1816609,
            0.18643598,
            0.1249827,
            0.13038063,
            0.13577855,
            0.14117648,
            0.14657441,
            0.15197232,
            0.15737024,
            0.16276817,
            0.16816609,
            0.17356402,
            0.17896195,
            0.18435986,
            0.18975781,
            0.19515572,
            0.20055364,
            0.20595156,
            0.21134949,
            0.1399308,
            0.14595157,
            0.15197232,
            0.15799308,
            0.16401385,
            0.1700346,
            0.17605537,
            0.18207613,
            0.18809691,
            0.19411765,
            0.20013842,
            0.20615919,
            0.21217994,
            0.21820071,
            0.22422147,
            0.23024222,
            0.23626298,
            0.1548789,
            0.16152248,
            0.16816609,
            0.17480971,
            0.1814533,
            0.1880969,
            0.19474049,
            0.2013841,
            0.20802769,
            0.21467128,
            0.22131488,
            0.22795847,
            0.23460206,
            0.24124569,
            0.24788928,
            0.25453287,
            0.26117647,
            0.169827,
            0.17709342,
            0.18435986,
            0.1916263,
            0.19889273,
            0.20615919,
            0.2134256,
            0.22069204,
            0.22795847,
            0.23522493,
            0.24249136,
            0.2497578,
            0.25702423,
            0.2642907,
            0.2715571,
            0.27882355,
            0.28608996,
            0.1847751,
            0.19266437,
            0.20055364,
            0.20844291,
            0.2163322,
            0.22422147,
            0.23211074,
            0.24000001,
            0.24788928,
            0.25577855,
            0.26366782,
            0.27155712,
            0.2794464,
            0.28733566,
            0.29522493,
            0.3031142,
            0.31100345,
            0.19972318,
            0.2082353,
            0.2167474,
            0.22525951,
            0.23377162,
            0.24228373,
            0.25079584,
            0.25930798,
            0.2678201,
            0.2763322,
            0.28484428,
            0.2933564,
            0.30186853,
            0.3103806,
            0.31889272,
            0.32740483,
            0.33591697,
            0.21467128,
            0.22380623,
            0.23294118,
            0.24207616,
            0.25121108,
            0.26034603,
            0.269481,
            0.27861595,
            0.2877509,
            0.29688582,
            0.30602077,
            0.3151557,
            0.32429066,
            0.3334256,
            0.34256056,
            0.3516955,
            0.36083046,
            0.22961938,
            0.23937717,
            0.24913496,
            0.25889274,
            0.26865053,
            0.27840832,
            0.2881661,
            0.2979239,
            0.30768165,
            0.31743944,
            0.32719725,
            0.33695504,
            0.3467128,
            0.3564706,
            0.36622837,
            0.3759862,
            0.38574398,
            0.24456748,
            0.25494808,
            0.26532874,
            0.27570936,
            0.28609,
            0.2964706,
            0.3068512,
            0.31723186,
            0.32761246,
            0.3379931,
            0.34837368,
            0.3587543,
            0.36913496,
            0.3795156,
            0.3898962,
            0.40027684,
            0.41065744,
        ];

        let U_W: [f32; 51] = [
            -0.014141201,
            0.055294134,
            0.12472931,
            0.19416465,
            0.2636,
            0.33303532,
            0.40247053,
            0.47190586,
            0.5413411,
            0.6107764,
            0.6802118,
            0.7496469,
            0.8190822,
            0.88851756,
            0.9579528,
            1.0273882,
            1.0968235,
            1.6646118,
            1.7331294,
            1.801647,
            1.8701648,
            1.9386823,
            2.0072,
            2.0757177,
            2.1442351,
            2.212753,
            2.2812705,
            2.3497884,
            2.4183059,
            2.4868236,
            2.555341,
            2.6238587,
            2.6923766,
            2.760894,
            3.3433647,
            3.4109645,
            3.4785647,
            3.5461648,
            3.6137648,
            3.6813645,
            3.7489645,
            3.8165648,
            3.8841648,
            3.9517646,
            4.019365,
            4.0869646,
            4.154565,
            4.2221646,
            4.289765,
            4.3573647,
            4.4249644,
        ];

        let (mut data, l) = layer_factory::<f32>(Layers::Linear, X, W, B, None, 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let mut z = l.forward(data1, None);
        for i in 0..Z.len() {
            assert!((Z[i] - z[i]).abs() < f32::EPSILON);
        }
        let (flattened, squared) = loss_function_factory(LossFunctions::MeanSquares, Y, 1.0);
        let loss = squared.forward(&flattened, &z);
        squared.backward(&z);
        for i in 0..D_Z.len() {
            assert!((D_Z[i] - z[i]).abs() < f32::EPSILON);
        }
        let data2 = (
            data.0.as_mut_slice(),
            data.1.as_mut_slice(),
            data.2.as_slice(),
        );
        let updated = l.backward(data2, &mut z, 0.1);
        for i in 0..U_W.len() {
            assert!((U_W[i] - updated.1[i]).abs() < f32::EPSILON);
        }
    }

    #[test]
    fn test_3_x_3_f64() {
        let w0: Vec<f64> = vec![0.7, 0.8, 0.9];
        let w1: Vec<f64> = vec![1.0, 1.1, 1.2];
        let W = vec![w0, w1];

        let x0: Vec<f64> = vec![0.1, 0.2];
        let x1: Vec<f64> = vec![0.3, 0.4];
        let x2: Vec<f64> = vec![0.5, 0.6];
        let X = vec![x0, x1, x2];

        let b0: Vec<f64> = vec![0.0; 3];
        let b1: Vec<f64> = vec![0.0; 3];
        let b2: Vec<f64> = vec![0.0; 3];
        let B = vec![b0, b1, b2];

        let y0: Vec<f64> = vec![0.5, 0.6, 0.7];
        let y1: Vec<f64> = vec![0.8, 0.9, 1.0];
        let y2: Vec<f64> = vec![1.1, 1.2, 1.3];
        let Y = vec![y0, y1, y2];

        let Z: Vec<f64> = vec![
            -0.22999999999999998,
            -0.29999999999999993,
            -0.36999999999999994,
            -0.19000000000000006,
            -0.21999999999999997,
            -0.25,
            -0.15000000000000013,
            -0.1399999999999999,
            -0.13000000000000012,
        ];

        let D_Z = vec![
            -0.051111111111111107,
            -0.066666666666666652,
            -0.08222222222222221,
            -0.04222222222222223,
            -0.048888888888888878,
            -0.055555555555555552,
            -0.033333333333333361,
            -0.031111111111111089,
            -0.028888888888888912,
        ];

        let U_X = vec![
            0.11046666666666667,
            0.21342222222222224,
            0.3,
            0.41204444444444444,
            0.5154666666666666,
            0.6,
        ];

        let U_W = vec![
            0.7034444444444444,
            0.8036888888888889,
            0.9039333333333334,
            1.004711111111111,
            1.1051555555555557,
            1.2056,
        ];
        let (mut data, l) = layer_factory::<f64>(Layers::Linear, X, W, B, None, 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let mut z = l.forward(data1, None);

        let (flattened, squared) = loss_function_factory(LossFunctions::MeanSquares, Y, 1.0);
        let loss = squared.forward(&flattened, &z);
        for i in 0..Z.len() {
            assert!((Z[i] - z[i]).abs() < f64::EPSILON);
        }
        assert!((loss[0] - 0.05397777777777777).abs() < f64::EPSILON);
        squared.backward(&z);
        for i in 0..D_Z.len() {
            assert!((D_Z[i] - z[i]).abs() < f64::EPSILON);
        }
        let data2 = (
            data.0.as_mut_slice(),
            data.1.as_mut_slice(),
            data.2.as_slice(),
        );
        let updated = l.backward(data2, &mut z, 0.1);
        for i in 0..U_W.len() {
            assert!((U_W[i] - updated.1[i]).abs() < f64::EPSILON);
        }
        for i in 0..U_X.len() {
            assert!((U_X[i] - updated.0[i]).abs() < f64::EPSILON);
        }
    }

    #[test]
    fn test_3_x_3_f32() {
        let w0: Vec<f32> = vec![0.7, 0.8, 0.9];
        let w1: Vec<f32> = vec![1.0, 1.1, 1.2];
        let W = vec![w0, w1];

        let x0: Vec<f32> = vec![0.1, 0.2];
        let x1: Vec<f32> = vec![0.3, 0.4];
        let x2: Vec<f32> = vec![0.5, 0.6];
        let X = vec![x0, x1, x2];

        let b0: Vec<f32> = vec![0.0; 3];
        let b1: Vec<f32> = vec![0.0; 3];
        let b2: Vec<f32> = vec![0.0; 3];
        let B = vec![b0, b1, b2];

        let y0: Vec<f32> = vec![0.5, 0.6, 0.7];
        let y1: Vec<f32> = vec![0.8, 0.9, 1.0];
        let y2: Vec<f32> = vec![1.1, 1.2, 1.3];
        let Y = vec![y0, y1, y2];

        let Z: Vec<f32> = vec![
            -0.22999999,
            -0.3,
            -0.36999997,
            -0.19,
            -0.21999991,
            -0.25,
            -0.14999998,
            -0.13999999,
            -0.12999988,
        ];

        let D_Z: Vec<f32> = vec![
            -0.051111111111111107,
            -0.066666666666666652,
            -0.08222222222222221,
            -0.04222222222222223,
            -0.048888888888888878,
            -0.055555555555555552,
            -0.033333333333333361,
            -0.031111111111111089,
            -0.028888888888888912,
        ];

        let D_X: Vec<f32> = vec![
            0.11046666666666667,
            0.21342222222222224,
            0.3,
            0.41204444444444444,
            0.5154666666666666,
            0.6,
        ];

        let D_W: Vec<f32> = vec![
            0.7034444444444444,
            0.8036888888888889,
            0.9039333333333334,
            1.004711111111111,
            1.1051555555555557,
            1.2056,
        ];
        let (mut data, l) = layer_factory::<f32>(Layers::Linear, X, W, B, None, 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let mut z = l.forward(data1, None);

        let (flattened, squared) = loss_function_factory(LossFunctions::MeanSquares, Y, 1.0);
        let loss = squared.forward(&flattened, &z);
        for i in 0..Z.len() {
            assert!((Z[i] - z[i]).abs() < f32::EPSILON);
        }
        assert!((loss[0] - 0.05397777777777777).abs() < f32::EPSILON);
        squared.backward(&z);
        for i in 0..D_Z.len() {
            assert!((D_Z[i] - z[i]).abs() < f32::EPSILON);
        }
        let data2 = (
            data.0.as_mut_slice(),
            data.1.as_mut_slice(),
            data.2.as_slice(),
        );
        let updated = l.backward(data2, &mut z, 0.1);
        for i in 0..D_W.len() {
            assert!((D_W[i] - updated.1[i]).abs() < f32::EPSILON);
        }
        for i in 0..D_X.len() {
            assert!((D_X[i] - updated.0[i]).abs() < f32::EPSILON);
        }
    }

    #[test]
    fn test_conv2d_5_3_f64() {
        let features = vec![
            vec![1.0, 1.0, 1.0, 0.0, 0.0],
            vec![0.0, 1.0, 1.0, 1.0, 0.0],
            vec![0.0, 0.0, 1.0, 1.0, 1.0],
            vec![0.0, 0.0, 1.0, 1.0, 0.0],
            vec![0.0, 1.0, 1.0, 0.0, 0.0],
        ];

        let kernel = vec![
            vec![1.0, 0.0, 1.0],
            vec![0.0, 1.0, 0.0],
            vec![1.0, 0.0, 1.0],
        ];

        let Z = vec![4.0, 3.0, 4.0, 2.0, 4.0, 3.0, 2.0, 3.0, 4.0];
        let D_X = [4.0, 3.0, 8.0, 3.0, 4.0, 2.0, 8.0, 8.0, 8.0, 3.0, 6.0, 8.0, 18.0, 9.0, 8.0, 2.0, 6.0, 8.0, 8.0, 3.0, 2.0, 3.0, 6.0, 3.0, 4.0];
        let D_W = [22.0, 23.0, 19.0, 14.0, 25.0, 21.0, 14.0, 19.0, 19.0];
        let bias: Vec<Vec<f64>> = vec![];
        let p_s = (0 as u16, 1 as u16);
        let (mut data, l) =
            layer_factory::<f64>(Layers::Conv2D, features, kernel, bias, Some(p_s), 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let mut z = l.forward(data1, None);
        for i in 0..Z.len() {
            assert!(Z[i] == z[i]);
        }
        let data2 = (
            data.0.as_mut_slice(),
            data.1.as_mut_slice(),
            data.2.as_slice(),
        );
        let updated = l.backward(data2, z.as_mut_slice(), 0.1);
        for i in 0..D_X.len() {
            assert!((D_X[i] - updated.0[i]).abs() < f64::EPSILON);
        }
        for i in 0..D_W.len() {
            assert!((D_W[i] - updated.1[i]).abs() < f64::EPSILON);
        }


    }

    #[test]
    fn test_conv2d_20_17_f64() {
        let features = vec![
            vec![
                6.0, 3.0, 7.0, 4.0, 6.0, 9.0, 2.0, 6.0, 7.0, 4.0, 3.0, 7.0, 7.0, 2.0, 5.0, 4.0,
                1.0, 7.0, 5.0, 1.0,
            ],
            vec![
                4.0, 0.0, 9.0, 5.0, 8.0, 0.0, 9.0, 2.0, 6.0, 3.0, 8.0, 2.0, 4.0, 2.0, 6.0, 4.0,
                8.0, 6.0, 1.0, 3.0,
            ],
            vec![
                8.0, 1.0, 9.0, 8.0, 9.0, 4.0, 1.0, 3.0, 6.0, 7.0, 2.0, 0.0, 3.0, 1.0, 7.0, 3.0,
                1.0, 5.0, 5.0, 9.0,
            ],
            vec![
                3.0, 5.0, 1.0, 9.0, 1.0, 9.0, 3.0, 7.0, 6.0, 8.0, 7.0, 4.0, 1.0, 4.0, 7.0, 9.0,
                8.0, 8.0, 0.0, 8.0,
            ],
            vec![
                6.0, 8.0, 7.0, 0.0, 7.0, 7.0, 2.0, 0.0, 7.0, 2.0, 2.0, 0.0, 4.0, 9.0, 6.0, 9.0,
                8.0, 6.0, 8.0, 7.0,
            ],
            vec![
                1.0, 0.0, 6.0, 6.0, 7.0, 4.0, 2.0, 7.0, 5.0, 2.0, 0.0, 2.0, 4.0, 2.0, 0.0, 4.0,
                9.0, 6.0, 6.0, 8.0,
            ],
            vec![
                9.0, 9.0, 2.0, 6.0, 0.0, 3.0, 3.0, 4.0, 6.0, 6.0, 3.0, 6.0, 2.0, 5.0, 1.0, 9.0,
                8.0, 4.0, 5.0, 3.0,
            ],
            vec![
                9.0, 6.0, 8.0, 6.0, 0.0, 0.0, 8.0, 8.0, 3.0, 8.0, 2.0, 6.0, 5.0, 7.0, 8.0, 4.0,
                0.0, 2.0, 9.0, 7.0,
            ],
            vec![
                5.0, 7.0, 8.0, 3.0, 0.0, 0.0, 9.0, 3.0, 6.0, 1.0, 2.0, 0.0, 4.0, 0.0, 7.0, 0.0,
                0.0, 1.0, 1.0, 5.0,
            ],
            vec![
                6.0, 4.0, 0.0, 0.0, 2.0, 1.0, 4.0, 9.0, 5.0, 6.0, 3.0, 6.0, 7.0, 0.0, 5.0, 7.0,
                4.0, 3.0, 1.0, 5.0,
            ],
            vec![
                5.0, 0.0, 8.0, 5.0, 2.0, 3.0, 3.0, 2.0, 9.0, 2.0, 2.0, 3.0, 6.0, 3.0, 8.0, 0.0,
                7.0, 6.0, 1.0, 7.0,
            ],
            vec![
                0.0, 8.0, 8.0, 1.0, 6.0, 9.0, 2.0, 6.0, 9.0, 8.0, 3.0, 0.0, 1.0, 0.0, 4.0, 4.0,
                6.0, 8.0, 8.0, 2.0,
            ],
            vec![
                2.0, 2.0, 3.0, 7.0, 5.0, 7.0, 0.0, 7.0, 3.0, 0.0, 7.0, 3.0, 5.0, 7.0, 3.0, 2.0,
                8.0, 2.0, 8.0, 1.0,
            ],
            vec![
                1.0, 1.0, 5.0, 2.0, 8.0, 3.0, 0.0, 3.0, 0.0, 4.0, 3.0, 7.0, 7.0, 6.0, 2.0, 0.0,
                0.0, 2.0, 5.0, 6.0,
            ],
            vec![
                5.0, 5.0, 5.0, 2.0, 5.0, 7.0, 1.0, 4.0, 0.0, 0.0, 4.0, 2.0, 3.0, 2.0, 0.0, 0.0,
                4.0, 5.0, 2.0, 8.0,
            ],
            vec![
                4.0, 7.0, 0.0, 4.0, 2.0, 0.0, 3.0, 4.0, 6.0, 0.0, 2.0, 1.0, 8.0, 9.0, 5.0, 9.0,
                2.0, 7.0, 7.0, 1.0,
            ],
            vec![
                5.0, 6.0, 1.0, 9.0, 1.0, 9.0, 0.0, 7.0, 0.0, 8.0, 5.0, 6.0, 9.0, 6.0, 9.0, 2.0,
                1.0, 8.0, 7.0, 9.0,
            ],
            vec![
                6.0, 8.0, 3.0, 3.0, 0.0, 7.0, 2.0, 6.0, 1.0, 1.0, 6.0, 5.0, 2.0, 8.0, 9.0, 5.0,
                9.0, 9.0, 5.0, 0.0,
            ],
            vec![
                3.0, 9.0, 5.0, 5.0, 4.0, 0.0, 7.0, 4.0, 4.0, 6.0, 3.0, 5.0, 3.0, 2.0, 6.0, 7.0,
                3.0, 1.0, 9.0, 2.0,
            ],
            vec![
                0.0, 7.0, 2.0, 9.0, 6.0, 9.0, 4.0, 9.0, 4.0, 6.0, 8.0, 4.0, 0.0, 9.0, 9.0, 0.0,
                1.0, 5.0, 8.0, 7.0,
            ],
        ];

        let kernel = vec![
            vec![
                4.0, 0.0, 6.0, 4.0, 5.0, 6.0, 2.0, 9.0, 2.0, 4.0, 5.0, 8.0, 4.0, 0.0, 3.0, 4.0, 9.0,
            ],
            vec![
                9.0, 4.0, 6.0, 3.0, 0.0, 4.0, 6.0, 9.0, 9.0, 5.0, 4.0, 3.0, 1.0, 3.0, 9.0, 9.0, 2.0,
            ],
            vec![
                9.0, 0.0, 7.0, 4.0, 3.0, 7.0, 6.0, 1.0, 0.0, 3.0, 7.0, 1.0, 2.0, 0.0, 0.0, 2.0, 4.0,
            ],
            vec![
                2.0, 0.0, 0.0, 7.0, 9.0, 1.0, 2.0, 1.0, 2.0, 6.0, 0.0, 9.0, 7.0, 9.0, 9.0, 9.0, 1.0,
            ],
            vec![
                2.0, 8.0, 6.0, 3.0, 9.0, 4.0, 1.0, 7.0, 3.0, 8.0, 4.0, 8.0, 3.0, 9.0, 4.0, 8.0, 7.0,
            ],
            vec![
                2.0, 0.0, 2.0, 3.0, 1.0, 0.0, 6.0, 7.0, 6.0, 4.0, 0.0, 6.0, 6.0, 8.0, 2.0, 8.0, 0.0,
            ],
            vec![
                0.0, 3.0, 8.0, 5.0, 2.0, 0.0, 3.0, 8.0, 2.0, 8.0, 6.0, 3.0, 2.0, 9.0, 4.0, 4.0, 2.0,
            ],
            vec![
                8.0, 3.0, 4.0, 3.0, 4.0, 6.0, 8.0, 6.0, 4.0, 9.0, 9.0, 6.0, 9.0, 4.0, 2.0, 6.0, 1.0,
            ],
            vec![
                8.0, 9.0, 9.0, 0.0, 5.0, 6.0, 7.0, 9.0, 8.0, 1.0, 9.0, 1.0, 4.0, 4.0, 5.0, 2.0, 7.0,
            ],
            vec![
                0.0, 5.0, 3.0, 0.0, 6.0, 8.0, 3.0, 3.0, 5.0, 2.0, 5.0, 6.0, 9.0, 9.0, 2.0, 6.0, 2.0,
            ],
            vec![
                1.0, 9.0, 3.0, 7.0, 8.0, 6.0, 0.0, 2.0, 8.0, 0.0, 8.0, 7.0, 0.0, 5.0, 4.0, 5.0, 9.0,
            ],
            vec![
                4.0, 5.0, 4.0, 4.0, 3.0, 2.0, 2.0, 3.0, 8.0, 1.0, 8.0, 0.0, 0.0, 4.0, 5.0, 5.0, 2.0,
            ],
            vec![
                6.0, 8.0, 9.0, 7.0, 5.0, 7.0, 4.0, 7.0, 9.0, 3.0, 9.0, 7.0, 9.0, 1.0, 4.0, 8.0, 3.0,
            ],
            vec![
                5.0, 0.0, 8.0, 0.0, 4.0, 3.0, 2.0, 5.0, 1.0, 2.0, 4.0, 8.0, 1.0, 9.0, 7.0, 1.0, 4.0,
            ],
            vec![
                6.0, 7.0, 0.0, 5.0, 0.0, 1.0, 0.0, 4.0, 9.0, 8.0, 5.0, 0.0, 0.0, 1.0, 8.0, 2.0, 0.0,
            ],
            vec![
                4.0, 6.0, 5.0, 0.0, 4.0, 4.0, 5.0, 2.0, 4.0, 6.0, 4.0, 4.0, 4.0, 9.0, 9.0, 2.0, 0.0,
            ],
            vec![
                4.0, 8.0, 0.0, 2.0, 3.0, 0.0, 0.0, 7.0, 1.0, 7.0, 6.0, 9.0, 9.0, 1.0, 5.0, 5.0, 2.0,
            ],
        ];

        let Z = vec![
            5828.0, 5589.0, 5940.0, 5524.0, 5584.0, 5518.0, 5278.0, 5559.0, 5662.0, 5239.0, 5492.0,
            5496.0, 5533.0, 5497.0, 5665.0, 5656.0,
        ];

        let bias: Vec<Vec<f64>> = vec![];
        let p_s = (0 as u16, 345 as u16);
        let (mut data, l) =
            layer_factory::<f64>(Layers::Conv2D, features, kernel, bias, Some(p_s), 0.0);
        let data1 = (data.0.as_slice(), data.1.as_mut_slice(), data.2.as_slice());
        let z = l.forward(data1, None);
        for i in 0..Z.len() {
            assert!(Z[i] == z[i]);
        }
    }
}
